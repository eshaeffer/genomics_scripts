#!/bin/bash

##
#$ -S /bin/bash
##
#### This is an example submission script.
#### The lines that begin with `#$` are used
#### as arguments to qsub, while lines that
#### start with just `##` are comments
##
#### The below line determines how many CPUs
#### your job will request. Only set it higher 
#### if you need the additional memory
#$ -pe smp 4
##
#### If your job requires lots more memory,
#### use one of the below options by removing
#### the first two `#`
####$ -l mid_mem
####$ -l high_mem
##
#### The below option determines which queues 
#### your job is submitted to. Multiple can be
#### passed if separated by a comma
#$ -q UI 
##
#### The below option tells the compute node to 
#### begin execution from the same directory as
#### where you run the qsub. Otherwise, it is 
#### executed from '~/' -- which is where your
#### log file will end up. 
#$ -cwd
##
#### The remining options all deal with making
#### sure your log file is in the correct format
#$ -j y
#$ -o $JOB_NAME.log 
#$ -ckpt user
##################
## DON'T FORGET ##
##  TO SET THE  ## 
##   JOB NAME   ##
##################
#$ -N BQSR

#### The below variables are a helpful way to
#### avoid having to repeat long file paths many
#### times. You may need to add more variables
#### as we do more analyses. 
DNA_HOME=~/workspace/dna
DATA=$DNA_HOME/data
TOOL=/bin


#### The below lines print the date to the log
#### and then store it as a variable
date
start=`date +%s`


########################################
## Put the commands you are executing ##
## inside of the " " on the next line ##
## so they will be printed to the log ##
########################################
CMD="
"


#### The below commands prints the text you
#### assigned to the CMD variable to the log
echo "**************************************"
echo "commands=$CMD"
echo "**************************************"

########################################
## Put the commands you are executing ##
##  in the lines below this comment,  ##
##   so they are actually  executed   ##
########################################

module load jdk/8u121

tooldir=/gatk-4.1.5.0
ref=/hg38bundle
input=/input
output=/out

$tooldir/gatk BaseRecalibrator \
--reference $ref/Homo_sapiens_assembly38.fasta \
--input $input/input.bam \
--output $output/output.recal_data.table1 \
--known-sites \
$ref/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz \
--known-sites \
$ref/dbsnp_146.hg38.vcf.gz

$tooldir/gatk ApplyBQSR \
--reference $ref/Homo_sapiens_assembly38.fasta \
--input $input/input.bam \
-bqsr $output/output.recal_data.table1 \
--output $output/AR5361b.sorted.md.bqsr.bam \
-OBI TRUE


$tooldir/gatk BaseRecalibrator \
--reference $ref/Homo_sapiens_assembly38.fasta \
--input $output/output.sorted.md.bqsr.bam \
--output $output/output.recal_data.table2 \
--known-sites \
$ref/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz \
--known-sites \
$ref/dbsnp_146.hg38.vcf.gz

module load R/3.5.1

$tooldir/gatk AnalyzeCovariates \
-before $output/output.recal_data.table1 \
-after $output/output.recal_data.table2 \
-csv $output/output.BQSR.csv \
-plots $output/output.BQSR.pdf

#### The below commands print the date that your
#### job finished running to the log, and then
#### calcualtes the total amount of time it took
#### for the job to complete
date
end=`date +%s`
runtime=$((end-start))
echo "runtime=$runtime secs"

